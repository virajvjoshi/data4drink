import * as React from "react"
import { PropertyControls, ControlType, addPropertyControls } from "framer"
import { useState } from "react"

/*
 ** INPUT
 ** - Validation
 ** - Show Password button
 */

interface Props {
    value: string
    onValueChange: (value: string) => void
    placeholder: string
    backgroundColor: string
    textColor: string
    focusColor: string
    fontSize: number
    width: number
    height: number
    radius: number
    padding: number
    paddingPerSide: boolean
    paddingTop: number
    paddingRight: number
    paddingBottom: number
    paddingLeft: number
    border: string
    borderWidth: number
    multiLine: boolean
    password: boolean
    onChange: any
}

interface State {
    value: string
    valueFromProps: string
}

export function Input(props) {
    const {
        placeholder,
        backgroundColor,
        textColor,
        fontSize,
        radius,
        paddingPerSide,
        padding,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft,
        border,
        borderWidth,
        password,
        onSubmit,
        onFocus,
        onBlur,
        value,
        topLeft,
        topRight,
        bottomRight,
        bottomLeft,
        isMixed,
        multiLine,
    } = props

    const [inputValue, setValue] = useState(value)

    const paddingValue = paddingPerSide
        ? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
        : padding
    const borderRadius = isMixed ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px` : `${radius}px`

    const onChange = (event: React.ChangeEvent) => {
        const element = multiLine
            ? (event.nativeEvent.target as HTMLTextAreaElement)
            : (event.nativeEvent.target as HTMLInputElement)

        const value = element.value

        if (props.onChange) props.onChange(value)

        setValue(value)

        if (props.onValueChange) {
            props.onValueChange(value)
        }
    }

    React.useEffect(() => {
        setValue(value)
    }, [value])

    const Tag = multiLine ? "textarea" : "input"

    return (
        <>
            <style>
                {`        
                    .framer-input-3jawBika7AwVhQLQw90L:focus {
                        box-shadow: inset 0 0 0 ${props.borderWidth}px
                        ${props.focusColor} !important;
                    }

                    .framer-input-3jawBika7AwVhQLQw90L::placeholder {
                        color: #bbb;
                    }
                `}
            </style>
            <Tag
                onChange={onChange}
                value={inputValue}
                placeholder={placeholder}
                onKeyDown={e => {
                    if (onSubmit && e.keyCode === 13) onSubmit()
                }}
                onFocus={() => {
                    if (onFocus) onFocus()
                }}
                onBlur={() => {
                    if (onBlur) onBlur()
                }}
                className="framer-input-3jawBika7AwVhQLQw90L"
                style={{
                    ...style,
                    backgroundColor,
                    color: textColor,
                    fontSize: fontSize,
                    borderRadius,
                    padding: paddingValue,
                    boxShadow: `inset 0 0 0 ${borderWidth}px ${border}`,
                }}
                type={password ? "password" : "text"}
            />
        </>
    )
}

Input.defaultProps = {
    value: "",
    placeholder: "Type somethingâ€¦",
    width: 300,
    height: 50,
    backgroundColor: "#F3F3F3",
    textColor: "#333",
    focusColor: "#09F",
    fontSize: 15,
    radius: 10,
    padding: 12,
    paddingPerSide: false,
    paddingTop: 12,
    paddingRight: 12,
    paddingBottom: 12,
    paddingLeft: 12,
    border: "rgba(0,0,0,0)",
    borderWidth: 1,
    multiLine: false,
    password: false,
}

addPropertyControls(Input, {
    placeholder: { type: ControlType.String, title: "Placeholder" },
    value: { type: ControlType.String, title: "Value" },
    textColor: { type: ControlType.Color, title: "Text Color" },
    backgroundColor: { type: ControlType.Color, title: "Background" },
    border: { type: ControlType.Color, title: "Border" },
    borderWidth: {
        type: ControlType.Number,
        title: " ",
        min: 1,
        max: 5,
        displayStepper: true,
    },
    focusColor: { type: ControlType.Color, title: "Focus" },
    padding: {
        type: ControlType.FusedNumber,
        toggleKey: "paddingPerSide",
        toggleTitles: ["Padding", "Padding per side"],
        valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
        valueLabels: ["T", "R", "B", "L"],
        min: 0,
        title: "Padding",
    },
    radius: {
        title: "Radius",
        type: ControlType.FusedNumber,
        defaultValue: Input.defaultProps.radius,
        toggleKey: "isMixed",
        toggleTitles: ["Radius", "Radius per corner"],
        valueKeys: ["topLeft", "topRight", "bottomRight", "bottomLeft"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
    },
    fontSize: {
        type: ControlType.Number,
        title: "Font Size",
        min: 5,
        max: 25,
    },
    multiLine: { type: ControlType.Boolean, title: "Text Area", defaultValue: false },
    password: { type: ControlType.Boolean, title: "Password", hidden: ({ multiLine }) => multiLine },
    onChange: { type: ControlType.EventHandler },
    onSubmit: { type: ControlType.EventHandler },
    onFocus: { type: ControlType.EventHandler },
    onBlur: { type: ControlType.EventHandler },
})

const style: React.CSSProperties = {
    border: "none",
    width: "100%",
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    outline: "none",
    resize: "none",
    margin: 0,
}
