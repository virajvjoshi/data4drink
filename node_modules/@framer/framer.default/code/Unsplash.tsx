import * as React from "react"
import { useEffect, useState } from "react"
import { Frame, addPropertyControls, ControlType } from "framer"

/*
 ** UPSPLASH
 ** - Figure out a way to not have it be the same image for 10+ seconds when creating
 ** - Avoid double images by searching array for existing links in localstorage?
 ** - Don't shuffle on size change
 ** - keep image when duplicating a locked component
 */

export interface UnsplashProps {
    search: any
    size: any
    onClick: any
    id: any
    lockImage: any
    radius: number
    topLeft: number
    topRight: number
    bottomRight: number
    bottomLeft: number
    isMixed: boolean
}

export function Unsplash({
    search,
    size,
    radius,
    onClick,
    id,
    lockImage,
    topLeft,
    topRight,
    bottomRight,
    bottomLeft,
    isMixed,
}: UnsplashProps) {
    const key = `unsplash_${
        id.includes("id_") ? id.substring(3, id.length) : id
    }`
    const cache = localStorage.getItem(key)
        ? JSON.parse(localStorage.getItem(key))
        : {}
    const [url, setUrl] = useState(cache.imageUrl || null)

    const borderRadius = isMixed
        ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px`
        : `${radius}px`

    async function getAndSetImageUrl() {
        const selectedSize = Sizes[size] as any
        const currentSize = 400 + selectedSize * 400
        const baseUrl = "https://source.unsplash.com"
        const route = search === "" ? "/random" : `/featured`
        const url = `${baseUrl}${route}/${currentSize}x${currentSize}?${search}`
        const response = await fetch(url)

        localStorage.setItem(
            key,
            JSON.stringify({ size, search, imageUrl: response.url })
        )

        return setUrl(response.url)
    }

    useEffect(() => {
        const cache = localStorage.getItem(key)
            ? JSON.parse(localStorage.getItem(key))
            : {}

        if (!lockImage || size !== cache.size || search !== cache.search)
            getAndSetImageUrl()
    }, [search, size, lockImage])

    return (
        <Frame
            width="100%"
            height="100%"
            style={{
                background: "rgba(136, 85, 255, 0.3)",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                backgroundImage: `url(${url ||
                    "https://static.framer.com/placeholder.png"})`,
                backgroundSize: "cover",
                backgroundPosition: "center",
                borderRadius,
            }}
            onClick={onClick}
        ></Frame>
    )
}

Unsplash.defaultProps = {
    search: "",
    size: "S",
    link: "https://static.framer.com/placeholder.png",
    image: "",
    radius: 0,
    lockImage: true,
}

addPropertyControls(Unsplash, {
    search: {
        type: ControlType.String,
        title: "Search",
        placeholder: "Nature, Citiesâ€¦",
    },
    lockImage: {
        type: ControlType.Boolean,
        title: "Shuffle",
        enabledTitle: "No",
        disabledTitle: "Yes",
        defaultValue: true,
    },
    size: {
        type: ControlType.Enum,
        title: "Size",
        options: ["S", "M", "L", "XL"],
        displaySegmentedControl: true,
    },
    radius: {
        title: "Radius",
        type: ControlType.FusedNumber,
        defaultValue: Unsplash.defaultProps.radius,
        toggleKey: "isMixed",
        toggleTitles: ["Radius", "Radius per corner"],
        valueKeys: ["topLeft", "topRight", "bottomRight", "bottomLeft"],
        valueLabels: ["TL", "TR", "BR", "BL"],
        min: 0,
    },
    onClick: {
        type: ControlType.EventHandler,
    },
})

enum Sizes {
    S,
    M,
    L,
    XL,
}
