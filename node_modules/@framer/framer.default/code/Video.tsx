import * as React from "react"
import { Frame, PropertyControls, ControlType, RenderTarget } from "framer"
import { cachedResponse, corsProxy, hashCode } from "./lib/Cache"

// NOTE: This is mostly Koen's code & notes, check in with him for questions

/**
 * - [ ] Make sure autoplay works in Safari for files we serve:
 *       https://www.stirtingale.com/guides/2018/10/mp4-not-working-cloudflare
 * - [ ] See if we can force cache html5 videos (local and on web).
 * - [ ] Make sure that force cached gives nice errors if storage is full
 * - [ ] Hook up optional loading indicator connection via children?
 * - [ ] Very nice placeholder video bundled in the project?
 */

type VideoProps = {
    srcType: SrcType
    srcUrl: string
    srcFile: string
    poster: string
    autoPlay: boolean
    canvasPlay: boolean
    controls: boolean
    muted: boolean
    loop: boolean
    playsinline: boolean
    preload: PreloadType
    objectFit: ObjectFitType
    backgroundColor: string
    radius: number
    onEnd?: Function
    onSeeked?: Function
    onPause?: Function
    onPlay?: Function
}

enum ObjectFitType {
    Fill = "fill",
    Contain = "contain",
    Cover = "cover",
    None = "none",
    ScaleDown = "scale-down",
}

enum PreloadType {
    None = "none",
    MetaData = "metadata",
    Auto = "auto",
    ForceCache = "force",
}

enum SrcType {
    Video = "Video",
    Url = "URL",
}

export class Video extends React.Component<VideoProps> {
    static defaultProps: VideoProps = {
        srcType: SrcType.Url,
        srcUrl: "https://assets.mixkit.co/videos/1489/1489-720.mp4",
        srcFile: "",
        poster: "",
        controls: false,
        autoPlay: true,
        canvasPlay: false,
        loop: true,
        muted: false,
        playsinline: true,
        preload: PreloadType.Auto,
        objectFit: ObjectFitType.Cover,
        backgroundColor: "rgba(0,0,0,0)",
        radius: 0,
    }

    static propertyControls: PropertyControls<VideoProps> = {
        backgroundColor: {
            type: ControlType.Color,
            title: "Background",
        },
        srcType: {
            type: ControlType.SegmentedEnum,
            title: "Source",
            options: [SrcType.Url, SrcType.Video],
        },
        srcUrl: {
            type: ControlType.String,
            title: " ",
            placeholder: ".../example.mp4",
            hidden(props) {
                return props.srcType === SrcType.Video
            },
        },
        radius: { type: ControlType.Number, title: "Radius" },
        srcFile: {
            type: ControlType.File,
            title: " ",
            allowedFileTypes: ["mp4"],
            hidden(props) {
                return props.srcType === SrcType.Url
            },
        },
        objectFit: {
            type: ControlType.Enum,
            title: "Fit",
            options: [
                ObjectFitType.Cover,
                ObjectFitType.Fill,
                ObjectFitType.Contain,
                ObjectFitType.ScaleDown,
                ObjectFitType.None,
            ],
        },
        controls: { type: ControlType.Boolean, title: "Controls" },
        autoPlay: { type: ControlType.Boolean, title: "Auto Play" },
        canvasPlay: {
            type: ControlType.Boolean,
            title: "Canvas",
            hidden(props) {
                return props.autoPlay === false
            },
        },
        loop: { type: ControlType.Boolean, title: "Loop" },
        muted: { type: ControlType.Boolean, title: "Muted" },
        playsinline: { type: ControlType.Boolean, title: "Inline" },
        preload: {
            type: ControlType.Enum,
            title: "Preload",
            options: [
                PreloadType.Auto,
                PreloadType.MetaData,
                PreloadType.None,
                PreloadType.ForceCache,
            ],
        },
        onEnd: { type: ControlType.EventHandler },
        onSeeked: { type: ControlType.EventHandler },
        onPause: { type: ControlType.EventHandler },
        onPlay: { type: ControlType.EventHandler },
    }

    videoRef: React.Ref<HTMLVideoElement> = null

    setVideoRef = async element => {
        this.videoRef = element

        const { srcUrl, preload, srcType } = this.props

        if (preload === PreloadType.ForceCache) {
            const url = this.url(true)
            const response = await cachedResponse(url)
            if (response && this.videoRef) {
                this.videoRef["src"] = URL.createObjectURL(response) // IE10+
            }
        }
    }

    url(cors = false) {
        if (this.props.srcType === SrcType.Url) {
            return cors ? corsProxy(this.props.srcUrl) : this.props.srcUrl
        }

        if (this.props.srcType === SrcType.Video) {
            return this.props.srcFile
        }
    }

    render() {
        const {
            srcType,
            srcFile,
            srcUrl,
            autoPlay,
            canvasPlay,
            loop,
            muted,
            playsinline,
            controls,
            preload,
            objectFit,
            backgroundColor,
            radius,
            onSeeked,
            onPause,
            onPlay,
            onEnd,
        } = this.props
        const isCanvas = RenderTarget.current() != RenderTarget.preview
        const isForcedCache = preload === PreloadType.ForceCache
        const key = hashCode(
            JSON.stringify({
                srcType,
                srcUrl,
                srcFile,
                autoPlay,
                canvasPlay,
                isForcedCache,
            })
        )

        return (
            <div
                style={{
                    width: "100%",
                    height: "100%",
                    overflow: "hidden",
                    backgroundColor: backgroundColor,
                    borderRadius: radius,
                    WebkitMaskImage: "-webkit-radial-gradient(white, black)",
                }}
            >
                <video
                    ref={isForcedCache ? this.setVideoRef : null}
                    key={key}
                    style={{
                        width: "100%",
                        height: "100%",
                        objectFit: objectFit,
                        objectPosition: "50% 50%",
                    }}
                    onSeeked={e => {
                        if (onSeeked) onSeeked(e)
                    }}
                    onPause={e => {
                        if (onPause) onPause(e)
                    }}
                    onPlay={e => {
                        if (onPlay) onPlay(e)
                    }}
                    onEnded={e => {
                        if (onEnd) onEnd(e)
                    }}
                    src={isForcedCache ? null : this.url()}
                    autoPlay={isCanvas ? canvasPlay : autoPlay}
                    controls={isCanvas ? false : controls}
                    muted={isCanvas ? true : muted}
                    loop={loop}
                    playsInline={playsinline}
                    preload={preload}
                />
            </div>
        )
    }
}
